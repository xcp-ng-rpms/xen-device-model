From 641c934c13cd1b498c16fac44f2036ab887aeb45 Mon Sep 17 00:00:00 2001
From: Gabor Igloi <gabor.igloi@citrix.com>
Date: Tue, 16 Jan 2018 16:34:03 +0000
Subject: [PATCH] Add support for fixed-newstyle nbd

Signed-off-by: Gabor Igloi <gabor.igloi@citrix.com>
diff --git a/block-nbd.c b/block-nbd.c
index e2c90eb..b7c7b5d 100644
--- a/block-nbd.c
+++ b/block-nbd.c
@@ -86,7 +86,7 @@ static int nbd_open(BlockDriverState *bs, const char* filename, int flags)
     if (sock == -1)
         return -errno;
 
-    ret = nbd_receive_negotiate(sock, &size, &blocksize);
+    ret = nbd_client_negotiate(sock, &size, &blocksize, "qemu_node");
     if (ret == -1)
     {
         close(sock);
diff --git a/nbd.c b/nbd.c
index 9d2fcd3..1f01e4b 100644
--- a/nbd.c
+++ b/nbd.c
@@ -29,6 +29,7 @@
 #endif
 #include <ctype.h>
 #include <inttypes.h>
+#include <assert.h> /* for assert */
 
 #include "qemu_socket.h"
 
@@ -65,6 +66,12 @@
 #define NBD_SET_SIZE_BLOCKS	_IO(0xab, 7)
 #define NBD_DISCONNECT          _IO(0xab, 8)
 
+/* Fixed newstyle negotiation */
+
+#define NBD_FLAG_HAS_FLAGS        1
+#define NBD_FLAG_C_FIXED_NEWSTYLE 1
+#define NBD_OPT_EXPORT_NAME       1
+
 /* That's all folks */
 
 #define read_sync(fd, buffer, size) nbd_wr_sync(fd, buffer, size, true)
@@ -298,7 +305,7 @@ int nbd_negotiate(int csock, off_t size)
 	return 0;
 }
 
-int nbd_receive_negotiate(int csock, off_t *size, size_t *blocksize)
+static int nbd_receive_negotiate_oldstyle(int csock, off_t *size, size_t *blocksize)
 {
 	char buf[8 + 8 + 8 + 128];
 	uint64_t magic;
@@ -343,6 +350,108 @@ int nbd_receive_negotiate(int csock, off_t *size, size_t *blocksize)
         return 0;
 }
 
+static int read_all(int sock, void *buf, size_t length)
+{
+    size_t bytes_read;
+
+    bytes_read = read_sync(sock, buf, length);
+    if (bytes_read != length) {
+        int serrno = errno;
+        LOG("read failed: expected %zd, got %zd: %s", length, bytes_read, strerror(serrno));
+        errno = serrno;
+        return -1;
+    }
+    return 0;
+}
+
+static int write_all(int sock, const void *buf, size_t length)
+{
+    size_t bytes_written;
+
+    bytes_written = write_sync(sock, (void*) buf, length);
+    if (bytes_written != length) {
+        int serrno = errno;
+        LOG("write failed: expected %zd, got %zd: %s", length, bytes_written, strerror(serrno));
+        errno = serrno;
+        return -1;
+    }
+    return 0;
+}
+
+#define check_and_return(n) do { \
+    if (-1 == (n)) { return -1; } \
+} while (0)
+
+static int expect(int sock, char *buf, const char *str)
+{
+    size_t length = strlen(str);
+    check_and_return(read_all(sock, buf, length));
+    if (strncmp(str, buf, length) != 0) {
+        int serrno = errno;
+        LOG("got unexpected value, was expecting %s", str);
+        errno = serrno;
+        return -1;
+    }
+    return 0;
+}
+
+static int send_option(int sock, uint32_t option_type, const char *export_name)
+{
+    uint32_t data_length, data_length_be;
+
+    TRACE("Sending option %d", option_type);
+
+    check_and_return(write_all(sock, "IHAVEOPT", 8));
+    option_type = htonl(option_type);
+    check_and_return(write_all(sock, &option_type, sizeof(option_type)));
+    data_length = strlen(export_name);
+    data_length_be = htonl(data_length);
+    check_and_return(write_all(sock, &data_length_be, sizeof(data_length_be)));
+    check_and_return(write_all(sock, export_name, data_length));
+    return 0;
+}
+
+static int fixed_newstyle_handshake(int sock, off_t *size, size_t *blocksize, const char* const export_name)
+{
+    uint32_t client_flags = htonl(NBD_FLAG_C_FIXED_NEWSTYLE);
+    char buf[200];
+    uint16_t handshake_flags;
+    uint64_t export_size;
+
+    TRACE("Performing fixed-newstyle handshake");
+
+    *blocksize = 1024;
+    check_and_return(expect(sock, buf, "NBDMAGIC"));
+    check_and_return(expect(sock, buf, "IHAVEOPT"));
+    check_and_return(read_all(sock, &handshake_flags, sizeof(handshake_flags)));
+    handshake_flags = ntohs(handshake_flags);
+    TRACE("Received handshake flags: %d\n", handshake_flags);
+    assert((handshake_flags & NBD_FLAG_HAS_FLAGS) == NBD_FLAG_HAS_FLAGS);
+
+    check_and_return(write_all(sock, &client_flags, sizeof(client_flags)));
+
+    check_and_return(send_option(sock, NBD_OPT_EXPORT_NAME, export_name));
+
+    /* non-fixed newstyle negotiation: we get this if the server is willing to
+     * allow the export */
+    check_and_return(read_all(sock, &export_size, sizeof(export_size)));
+    export_size = be64_to_cpu(export_size);
+    *size = export_size;
+    /* ignore the transmission flags (& zeroes) */
+    check_and_return(read_all(sock, buf, 2 + 124));
+    TRACE("Connected");
+    return 0;
+}
+
+int nbd_client_negotiate(int sock, off_t *size, size_t *blocksize, const char *export_name)
+{
+    if (export_name != NULL) {
+        return fixed_newstyle_handshake(sock, size, blocksize, export_name);
+    } else {
+        return nbd_receive_negotiate_oldstyle(sock, size, blocksize);
+    }
+}
+
 #ifndef _WIN32
 int nbd_init(int fd, int csock, off_t size, size_t blocksize)
 {
diff --git a/nbd.h b/nbd.h
index eb77cce..56baf2a 100644
--- a/nbd.h
+++ b/nbd.h
@@ -51,7 +51,7 @@ int unix_socket_outgoing(const char *path);
 int unix_socket_incoming(const char *path);
 
 int nbd_negotiate(int csock, off_t size);
-int nbd_receive_negotiate(int csock, off_t *size, size_t *blocksize);
+int nbd_client_negotiate(int sock, off_t *size, size_t *blocksize, const char *export_name);
 int nbd_init(int fd, int csock, off_t size, size_t blocksize);
 int nbd_send_request(int csock, struct nbd_request *request);
 int nbd_receive_reply(int csock, struct nbd_reply *reply);
diff --git a/qemu-nbd.c b/qemu-nbd.c
index 0af97ca..cd750e0 100644
--- a/qemu-nbd.c
+++ b/qemu-nbd.c
@@ -378,7 +378,7 @@ int main(int argc, char **argv)
                 goto out;
             }
 
-            ret = nbd_receive_negotiate(sock, &size, &blocksize);
+            ret = nbd_client_negotiate(sock, &size, &blocksize, NULL);
             if (ret == -1) {
                 ret = 1;
                 goto out;
diff --git a/xenstore.c b/xenstore.c
index d276948..bdb0e73 100644
--- a/xenstore.c
+++ b/xenstore.c
@@ -664,8 +664,12 @@ void xenstore_parse_domain_config(int hvm_domid)
                 format = &bdrv_raw;
             }
         }
-        /* Prefix with /dev/ if needed */
-        if (!strcmp(drv, "phy") && params[0] != '/') {
+
+        if (strncmp(params, "nbd:", 4) == 0) {
+            fprintf(logfile, "Using NBD for params %s\n", params);
+            format = &bdrv_nbd;
+        } else if (!strcmp(drv, "phy") && params[0] != '/') {
+            /* Prefix with /dev/ if needed */
             char *newparams = malloc(5 + strlen(params) + 1);
             sprintf(newparams, "/dev/%s", params);
             free(params);
